# Compiler to be used (GCC for ARM)
CC = arm-none-eabi-gcc

# Compilation flags:
# -c        : Compile only, do not link
# -mcpu=cortex-m4 : Target architecture is Cortex-M4
# -mthumb   : Use Thumb instruction set (default for ARM Cortex-M)
# -std=gnu11: Use the GNU11 standard for C language
# -Wall     : Enable all warning messages
CFLAGS = -c -mcpu=cortex-m4 -mthumb -std=gnu11 -Wall

# Preprocessor flags:
# -DSTM32F411xE : Define STM32F411xE macro to enable device-specific code
# -I<path>      : Include directories for CMSIS and device-specific headers
CPPFLAGS = -DSTM32F411xE \
		   -Ichip_headers/CMSIS/Device/ST/STM32F4xx/Include \
	       -Ichip_headers/CMSIS/Include

# Linker script for STM32F411
LINKER_FILE = stm32f411_linker_script.ld

# Linker flags:
# -nostdlib  : Do not use standard system libraries (use custom startup, etc.)
# -T <file>  : Use the specified linker script
# -Wl,-Map=stm32_blink.map : Generate a map file to visualize memory layout
LDFLAGS = -nostdlib -T $(LINKER_FILE) -Wl,-Map=stm32_blink.map

# Create the final target: The ELF executable
# The final executable is created by linking object files.
final : stm32_blink.elf 

# Create an object file for main.c
# The .o file is generated by compiling the main.c source file.
main.o : main.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $^ -o $@

# Create an object file for stm32f411_startup.c
# This file contains the startup code for the STM32F411.
stm32f411_startup.o : stm32f411_startup.c
	$(CC) $(CFLAGS) $^ -o $@
	
# Link the object files to create the final executable (STM32 Blink application)
stm32_blink.elf : main.o stm32f411_startup.o
	$(CC) $(LDFLAGS) $^ -o $@
	
# Programmer tool to be used for programming
PROGRAMMER = openocd

# Programmer flags :
# -f interface/stlink.cfg : Use the ST-Link interface configuration (for the ST-Link debugger/programmer)
# -f target/stm32f4x.cfg  : Use the STM32F4 target configuration (for STM32F4 devices)
PROGRAMMER_FLAGS = -f interface/stlink.cfg -f target/stm32f4x.cfg

# Flash the compiled ELF file to the STM32 microcontroller
# The 'flash' target performs the following operations:
# - Program the STM32 with the specified ELF file (stm32_blink.elf)
# - Verify the programming to ensure that the file was correctly flashed
# - Reset the STM32 device after programming
# - Exit OpenOCD once the process is complete
flash : stm32_blink.elf
	$(PROGRAMMER) $(PROGRAMMER_FLAGS) -c "program stm32_blink.elf verify reset exit"

# Clean the generated files (object files, executable, map file)
# This rule removes any generated files like .o, .elf, and .map files.
.PHONY: clean
clean:
	rm -f *.o *.elf *.map
